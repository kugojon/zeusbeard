<?php 
/**
  * CedCommerce
  *
  * NOTICE OF LICENSE
  *
  * This source file is subject to the End User License Agreement (EULA)
  * that is bundled with this package in the file LICENSE.txt.
  * It is also available through the world-wide-web at this URL:
  * http://cedcommerce.com/license-agreement.txt
  *
  * @category    Ced
  * @package     Ced_Jet
  * @author      CedCommerce Core Team <connect@cedcommerce.com >
  * @copyright   Copyright CEDCOMMERCE (http://cedcommerce.com/)
  * @license      http://cedcommerce.com/license-agreement.txt
  */

?>

<script type="text/javascript">
    <!--
    <?php $myBlock = $this->getLayout()->getBlock('groupProductsGrid'); ?>
    <?php if( is_object($myBlock) && $myBlock->getJsObjectName() ): ?>
    var checkBoxes = $H(<?php echo $myBlock->_getProducts(true) ?>);
    var warning = false;
    if (checkBoxes.size() > 0) {
        warning = true;
    }
    $('in_profile_product').value = checkBoxes.toQueryString();

    function registerVendorGroup(grid, element, checked)
    {
        if (checked) {
            checkBoxes.set(element.value, 0);
        } else {
            checkBoxes.unset(element.value);
        }
        $('in_profile_product').value = checkBoxes.toQueryString();
        grid.reloadParams = {'in_profile_product[]':checkBoxes.keys()};
    }

    function groupVendorsRowClick(grid, event)
    {
        var trElement = Event.findElement(event, 'tr');
        var isInput   = Event.element(event).tagName == 'INPUT';
        if (trElement) {
            var checkbox = Element.getElementsBySelector(trElement, 'input');
            if(checkbox[0]){
                var checked = isInput ? checkbox[0].checked : !checkbox[0].checked;
                if (checked) {
                    checkbox[0].checked = true;
                    if ( confirm("<?php echo $this->__('Warning!\r\nThis action will remove this product from already assigned profile\r\nAre you sure?') ?>") ) {
                        checkBoxes.set(checkbox[0].value, checked);
                        varienElementMethods.setHasChanges(checkbox[0]);
                    } else {
                        checkbox[0].checked = false;
                    }
                    warning = false;
                } else {
                    checkBoxes.unset(checkbox[0].value);
                }

                $('in_profile_product').value = checkBoxes.toQueryString();
                grid.reloadParams = {'in_profile_product[]':checkBoxes.keys()};
            }
        }
    }

    function groupVendorsRowInit(grid, row)
    {
        var checkbox = $(row).getElementsByClassName('checkbox')[0];
        if (checkbox) {
            if (checkbox.checked) {
                checkBoxes.set(checkbox.value, checkbox.checked);
            } else {
                checkBoxes.unset(checkbox.value);
            }

            $('in_profile_product').value = checkBoxes.toQueryString();
            grid.reloadParams = {'in_profile_product[]':checkBoxes.keys()};
        }
    }

    function myhandler(o)
    {
        if (checkBoxes.size() > 0) {
            if (!confirm("<?php echo $this->__('Warning!\r\nThis action will remove those products from already assigned profiles\r\nAre you sure?') ?>") ) {
                o.checked = !o.checked;
            } else {
                checkBoxes.each(function(el){
                    el.checked = o.checked;
                });
                return false;
            }
            warning = false;
        }

        $('in_profile_product').value = checkBoxes.toQueryString();
        grid.reloadParams = {'in_profile_product[]':checkBoxes.keys()};
    }

    <?php echo $myBlock->getJsObjectName() ?>.rowClickCallback = groupVendorsRowClick;
    <?php echo $myBlock->getJsObjectName() ?>.initRowCallback = groupVendorsRowInit;
    <?php echo $myBlock->getJsObjectName() ?>.checkboxCheckCallback = registerVendorGroup;
    <?php echo $myBlock->getJsObjectName() ?>.checkCheckboxes = myhandler;
    <?php echo $myBlock->getJsObjectName() ?>.rows.each(function(row){groupVendorsRowInit(<?php echo $myBlock->getJsObjectName() ?>, row)});
    $('in_profile_product_old').value = $('in_profile_product').value;
    <?php endif; ?>
    //-->
</script>
<script>
	Event.observe(window, 'load', function() {
		var objName = '<?php echo addslashes(htmlspecialchars($this->getRequest()->getParam('tab'))) ?>';
		if (objName) {
			obj = $(objName);
			//IE fix (bubbling event model)
			vendor_group_tabsJsTabs.setSkipDisplayFirstTab();
			vendor_group_tabsJsTabs.showTabContent(obj);

        }
        Product.AttributesBridge.setTabsObject(vendor_group_tabsJsTabs);

    });
</script>
